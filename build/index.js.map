{"version":3,"sources":["../source/index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;yBAES,WAAW;;;;qBAClB,OAAO;;;;sBACH,QAAQ;;;;uBACP,SAAS;;;;kBACd,IAAI;;;;AAEnB,IAAM,OAAO,GAAG,SAAV,OAAO,CAAa,GAAG,EAAE;AAC7B,MAAI,KAAK,YAAA;MAAE,QAAQ,YAAA,CAAC;;AAEpB,MAAM,OAAO,GAAG,EAAE,CAAC;;AAEnB,MAAM,KAAK,GAAG,SAAR,KAAK,GAAe;AACxB,WAAO,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;GACpC,CAAC;;AAEF,MAAM,MAAM,GAAG,SAAS,MAAM,CAAE,KAAK,EAAE;AACrC,QAAI,KAAK,EAAE,KAAK,KAAK,EAAE,OAAO;;AAE9B,QAAM,QAAQ,GAAG,KAAK,EAAE,CAAC;;AAEzB,WAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACpB,YAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAC,KAAK,EAAL,KAAK,EAAE,QAAQ,EAAR,QAAQ,EAAC,CAAC,CAAC;GAC5C,CAAC;;AAEF,SAAO,CAAC,IAAI,CAAC,uBAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;AAEjC,OAAK,GACH,qBAAQ,kBAAkB,CAAC,oBAAO,YAAY,CAAC,CAC9C,OAAO,CAAC;AACP,OAAG,EAAC,aAAC,GAAG,EAAE;AACR,aAAO,KAAK,EAAE,CAAC,KAAK,CAAC,wBAAG,GAAG,CAAC,CAAC,CAAC;KAC/B;AACD,OAAG,EAAC,aAAC,GAAG,EAAE,GAAG,EAAE;AACb,YAAM,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,wBAAG,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AACpC,aAAO,IAAI,CAAC;KACb;AACD,UAAM,EAAC,gBAAC,GAAG,EAAE;AACX,YAAM,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,wBAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAClC,aAAO,IAAI,CAAC;KACb;AACD,QAAI,EAAC,gBAAG;AACN,aAAO,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;KACvB;GACF,CAAC,CACD,OAAO,CAAC,YAAY;AACnB,QAAM,MAAM,GAAG,gBAAG,UAAU,CAAC,SAAS,CACpC,IAAI,EAAE,QAAQ,EACd,UAAC,EAAE;aAAK,EAAE,CAAC,CAAC,CAAC;KAAA,CAAC,CAAC;;AAEjB,QAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC/C,QAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;GAC1C,CAAC,CAAC;;AAEL,UAAQ,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;;AAE1B,SAAO,qBAAQ,MAAM,CACnB,QAAQ,EACR,EAAE,KAAK,EAAL,KAAK,EAAE,CACV,CAAC;CACH,CAAC;;qBAEa,OAAO","file":"index.js","sourcesContent":["'use strict';\r\n\r\nimport immutable from 'immutable';\r\nimport dp from 'dpath';\r\nimport events from 'events';\r\nimport stampit from 'stampit';\r\nimport Rx from 'rx';\r\n\r\nconst irecord = function (obj) {\r\n  let stamp, instance;\n\r\n  const history = [];\r\n\r\n  const state = function () {\r\n    return history[history.length - 1];\r\n  };\r\n\r\n  const update = function update (value) {\r\n    if (state() === value) return;\r\n\r\n    const previous = state();\r\n\r\n    history.push(value);\r\n    instance.emit('change', {value, previous});\r\n  };\r\n\r\n  history.push(immutable.Map(obj));\r\n\r\n  stamp =\n    stampit.convertConstructor(events.EventEmitter)\r\n    .methods({\r\n      get (key) {\r\n        return state().getIn(dp(key));\r\n      },\r\n      set (key, val) {\r\n        update(state().setIn(dp(key), val));\r\n        return this;\r\n      },\r\n      remove (key) {\r\n        update(state().removeIn(dp(key)));\r\n        return this;\r\n      },\r\n      toJS () {\r\n        return state().toJS();\r\n      }\r\n    })\r\n    .enclose(function () {\r\n      const source = Rx.Observable.fromEvent(\r\n        this, 'change',\r\n        (ev) => ev[0]);\r\n\r\n      this.subscribe = source.subscribe.bind(source);\r\n      this.filter = source.filter.bind(source);\r\n    });\n\n  instance = stamp.create();\n\r\n  return stampit.extend(\n    instance,\n    { stamp }\n  );\n};\r\n\r\nexport default irecord;\r\n"]}